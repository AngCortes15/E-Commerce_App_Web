const { generateUUID } = require('./utils');

class ProductException extends Error {
    constructor(errorMessage) {
        super(errorMessage);
        this.errorMessage = errorMessage;
    }
}
class Product {
    constructor(title, description, imageURL, unit, stock, pricerPerUnit, category) {
        this._uuid = generateUUID();
        this.title = title;
        this.description = description;
        this.imageURL = imageURL;
        this.unit = unit;
        this.stock = stock
        this.pricerPerUnit = pricerPerUnit;
        this.category = category;
    }
    // Setters

    set uuid(value) {
        throw new ProductException('Product uuids are autogenerated and cannot be set.');
    }
    set title(value) {
        if (value === '') {
            throw new ProductException('Product title cannot be empty.');
        }
        this._title = value;
    }

    set description(value){
        if (value == " "){
            throw new ProductException('Product description cannot be empty.');
        }
        this._description = value;
    }

    set imageURL(value){
        if (value == " "){
            throw new ProductException('Product imageURL cannot be empty.');
        }
        this._imageURL = value;
    }

    set unit(value){
        if (value == " "){
            throw new ProductException('Product unit cannot be empty.');
        }
        this._unit = value;
    }

    set stock(value){
        if (value == " "){
            throw new ProductException('Product stock cannot be empty.');
        }
        this._stock = value;
    }

    set pricerPerUnit(value){
        if (value == " "){
            throw new ProductException('Product pricerPerUnit cannot be empty.');
        }
        this._pricerPerUnit = value;
    }

    set category(value){
        if (value == " "){
            throw new ProductException('Product category cannot be empty.');
        }
        this._category = value;
    }

    // Getters
    get uuid() {
        return this._uuid;
    }
    get title() {
        return this._title;
    }
    get description(){
        return this._description;
    }
    get imageURL(){
        return this._imageURL;
    }
    get unit(){
        return this._unit;
    }
    get stock(){
        return this._stock;
    }
    get pricerPerUnit(){
        return this._pricerPerUnit;
    }
    get category(){
        return this._category;
    }
}

//Crea un producto a partir de un string a formato JSON
let createFromJson  = (jsonValue) => {
    let productFromString = JSON.parse(jsonValue);
    let product = new Product(productFromString.title, productFromString.description, productFromString.imageURL, productFromString.unit, productFromString.stock, productFromString.pricerPerUnit, productFromString.category);
    return product;
}

//Convertir objeto a nueva instancia del producto
function createFromObject(obj){
    let product = cleanObject(obj);
    return product;

}

function cleanObject(obj){
    let product = new Product(obj.title, obj.description, obj.imageURL, obj.unit, obj.stock, obj.pricerPerUnit, obj.category);
    return product;
}




// let product1 = new Product('Coca Cola', 'Refresco de cola', 'https://www.cocacola.es/content/dam/brands/es/coca-cola/original/1x1/1x1-cc-original-2000x2000.png', 'botella', 100, 1.5, 'refrescos');

let productoConBasura = {
    title: 'Coca Cola',
    description: 'Refresco de cola',
    imageURL: 'https://www.cocacola.es/content/dam/brands/es/coca-cola/original/1x1/1x1-cc-original-2000x2000.png',
    unit: 'botella',
    basura: 'esto es basura',
    basura2 : 'esto tambien es basura',
    stock: 100,
    pricerPerUnit: 1.5,
    category: 'refrescos',
    basura3: 'esto tambien es basura 3'
}

let producto2 = createFromObject(productoConBasura);
console.log(productoConBasura.basura3);
console.log(producto2);




